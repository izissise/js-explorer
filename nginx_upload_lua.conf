lua_package_path "/opt/nginx-big-upload/lib/?.lua;;";


# Run with docker:
# docker run --rm -it -p 80:80 -v directoryToServe:/home/user/downloads -v directoryUploads:/home/user/uploads -v $PWD/www:/var/www/files -v $PWD/nginx_upload.conf:/etc/nginx/conf.d/default.conf:ro -v $PWD/nginx-big-upload/lib:/opt/nginx-big-upload/lib:ro openresty/openresty:alpine

server {
    # Listen on http port
    listen 80;

    # Serve files listing
    location ^~ /files/ {
        # Path to serve (Trailing slash is important)
        alias /home/user/downloads/;

        # Random id so nginx doesn't serve random html files
        # that browsers would render, you can remove this line
        # if you want to directories with index.html to be rendered
        index 953b12d3-5ab2-49ad-8f49-6ea27f3a9994;

        # File listing (index) in json format
        autoindex on;
        autoindex_format json;
        autoindex_exact_size on;

        # Perf tuning
        sendfile           on;
        sendfile_max_chunk 2m;
        tcp_nopush         on;
        tcp_nodelay        on;
        keepalive_timeout  65;
    }

    # Serve root html/js/css files
    location / {
        root /var/www/files/;
        # Try files makes nginx serves root files on all sub-paths
        try_files $uri $uri/ /index.html;

        # Perf tuning
        sendfile           on;
        sendfile_max_chunk 2m;
        tcp_nopush         on;
        tcp_nodelay        on;
        keepalive_timeout  65;
    }

    # Upload location
    location ^~ /upload/ {
        limit_except GET POST {
            deny all;
        }

        set $storage backend_file;
        set $bu_sha1 on;
        set $file_storage_path /home/user/uploads/;
        client_body_buffer_size    16m;
        client_max_body_size       5g;
        # Give the client 20s to start.
        client_body_timeout        20s;



        #here goes your backend path
        set $backend_url /uploadbknd;
        content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
    }

   location /uploadbknd {
     internal;
     access_log off;
     content_by_lua '
        ngx.header["X-SHA1"]=ngx.req.get_headers()["X-SHA1"]
        ngx.status = 200
        ngx.print(ngx.req.get_body_data()) -- echo file infos
     ';
   }
}
